#! /usr/bin/env python

# Author:   Andrea Bocci <andrea.bocci@cern.ch>
# License:  GPL v3 or later

import sys
import os.path
import tempfile
import collections

def usage():
    print """Usage: %s LUMI.CSV

Update the averge pileup information in a .csv file generated by 
    brilcalc lumi --byls ... -o LUMI.CSV

The luminosity in LUMI.CSV is expected to be in /ub (the default for brilcalc).
The pileup is computed assuming a proton-proton inelastic cross-setion of 80 mb.
""" % os.path.basename(sys.argv[0])


def compute_pileup(delivered, nbx):
    """Compute the average pileup given the delivered luminosity within a lumisection, and the number of colliding bunches.
    
    The delivered luminosity is expected in /ub.
    The cross section is expressed in ub.
    The number of orbits in a lumisection is 2^18, by definition.
    """

    s = 80000.0     # proton-proton inelastic cross-setion, 80 mb
    l = 2**18       # number of orbits in a lumisection, 2^18 

    return (delivered * s) / (l * nbx)


def load_nbx():
    import urllib2
    result = dict()

    # download the mapping between the run number and the number colliding bunches from GitHub
    nbx = urllib2.urlopen('https://raw.githubusercontent.com/CMS-LUMI-POG/PCCTools/master/PCLumiProd/NBX.csv')

    for line in nbx:
        line = line.strip()
        if not line or line.startswith('Run') or line.startswith('#'):
            continue

        run, bx = map(int, line.split(','))
        result[run] = bx

    nbx.close()
    return result


def update_brilcalc_output(filename, nbx_by_run):
    # update a CSV file generated by brilcalc --byls
    try:
        lumi = open(filename, 'rU')
    except:
        sys.stderr.write('%s: cannot open \'%s\': %s\n' % (os.path.basename(sys.argv[0]), filename, sys.exc_info()[1]))
        sys.exit(1)
    
    # if possible, create the output file in the same directory as the input file 
    try:
        out = tempfile.NamedTemporaryFile(mode = 'w+', suffix = '.csv', delete = False, dir = os.path.dirname(filename))
    except:
        out = tempfile.NamedTemporaryFile(mode = 'w+', suffix = '.csv', delete = False)

    Entry = collections.namedtuple('Entry', ('run_fill', 'ls', 'date', 'beam_mode', 'energy', 'delivered', 'recorded', 'pileup', 'luminometer'))

    for line in lumi:
        line = line.strip()
        if not line or line.startswith('#'):
            out.write(line + '\n')
            continue

        # run:fill,ls,time,beamstatus,E(GeV),delivered(/ub),recorded(/ub),avgpu,source
        # 254231:4201,1:1,08/13/15 05:14:40,STABLE BEAMS,6500,1187.164,1170.387,0.0,PXL
        entry = line.split(',')
        run = int(entry[0].split(':')[0])
        nbx = nbx_by_run[run]
        delivered = float(entry[5])
        pileup = compute_pileup(delivered, nbx)
        entry[7] = '%0.2f' % pileup
        out.write(','.join(entry) + '\n')

    lumi.close()
    out.close()

    # try to maintain the permissions, user and group of the original file
    stat = os.stat(filename)
    try:
        os.chmod(out.name, stat.st_mode)
    except:
        pass
    try:
        os.chown(out.name, stat.st_uid, stat.st_gid)
    except:
        pass
    os.rename(out.name, filename)


if len(sys.argv) == 1 or sys.argv[1] in ('-h', '--help') or len(sys.argv) > 2:
    usage()
    sys.exit(0)


# load the mapping between runs and number of colliding bunches bunch
nbx_by_run = load_nbx()

# update a CSV file generated by brilcalc --byls
update_brilcalc_output(sys.argv[1], nbx_by_run)
